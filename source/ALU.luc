global Ops {
  const ADDER = 2b00;
  const BOOL = 2b01;
  const SHIFT = 2b10;
  const COMP = 2b11;
  const DELAY = 2^26 / 50000000;
}

module alu (
    input clk,  // 50MHz clock
    input rst,  // reset
    input alufn[6],
    input a[8],
    input b[8],
    output o8[8]
  ) {
  
  // initialize components
  add add8;//(8b0),.b(8b0),.alufn10(2b0));
  compare compare8;//lufn21(2b0),.v(0),.n(0),.z(0));
  bool bool8;//(.alufn30(4b0),.a(8b0),.b(8b0));
  shift shift8;//(.alufn10(2b0),.a(8b0),.b(3b0));

  always {
         
    add8.a = a;
    add8.b = b;
    add8.alufn20 = alufn[2:0];
    bool8.a = a;
    bool8.b = b;
    shift8.a = a;
    shift8.b = b[2:0];
    compare8.z = add8.z;
    compare8.v = add8.v;
    compare8.n = add8.n;
    bool8.alufn30 = alufn[3:0];
    shift8.alufn10 = alufn[1:0];
    compare8.alufn31 = alufn[3:1];
    
    // TMUX to select operation
    case (alufn[5:4]) {
      Ops.ADDER:
        // output of adder
        o8[7:0] = add8.out[7:0];
        
      Ops.BOOL:
        // output of boolean
        o8[7:0] = bool8.out[7:0];
      
      Ops.SHIFT:
        // output of shift
        o8[7:0] = shift8.out[7:0];
      
      Ops.COMP:
        // output of compare 
        add8.alufn20 = 3b001;
        o8 = compare8.out[7:0];
        
      default:
        o8 = 8b1;
      }
    }
}