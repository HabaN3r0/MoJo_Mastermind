/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input [6:0] color_button,
    input reset_button,
    input submit_button,
    input left_button,
    input right_button,
    input up_button,
    input down_button,
    output reg [9:0] ground,
    output reg [14:0] color_led,
    output reg [9:0] bc_led
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [(3'h7+0)-1:0] M_flagbutton_color_flagout;
  reg [(3'h7+0)-1:0] M_flagbutton_color_reset_flag;
  reg [(3'h7+0)-1:0] M_flagbutton_color_button;
  
  genvar GEN_flagbutton_color0;
  generate
  for (GEN_flagbutton_color0=0;GEN_flagbutton_color0<3'h7;GEN_flagbutton_color0=GEN_flagbutton_color0+1) begin: flagbutton_color_gen_0
    counter_2 flagbutton_color (
      .clk(clk),
      .rst(rst),
      .reset_flag(M_flagbutton_color_reset_flag[GEN_flagbutton_color0*(1)+(1)-1-:(1)]),
      .button(M_flagbutton_color_button[GEN_flagbutton_color0*(1)+(1)-1-:(1)]),
      .flagout(M_flagbutton_color_flagout[GEN_flagbutton_color0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [1-1:0] M_flagbutton_shift_left_flagout;
  reg [1-1:0] M_flagbutton_shift_left_reset_flag;
  reg [1-1:0] M_flagbutton_shift_left_button;
  counter_2 flagbutton_shift_left (
    .clk(clk),
    .rst(rst),
    .reset_flag(M_flagbutton_shift_left_reset_flag),
    .button(M_flagbutton_shift_left_button),
    .flagout(M_flagbutton_shift_left_flagout)
  );
  wire [1-1:0] M_flagbutton_shift_right_flagout;
  reg [1-1:0] M_flagbutton_shift_right_reset_flag;
  reg [1-1:0] M_flagbutton_shift_right_button;
  counter_2 flagbutton_shift_right (
    .clk(clk),
    .rst(rst),
    .reset_flag(M_flagbutton_shift_right_reset_flag),
    .button(M_flagbutton_shift_right_button),
    .flagout(M_flagbutton_shift_right_flagout)
  );
  wire [1-1:0] M_flagbutton_submit_flagout;
  reg [1-1:0] M_flagbutton_submit_reset_flag;
  reg [1-1:0] M_flagbutton_submit_button;
  counter_2 flagbutton_submit (
    .clk(clk),
    .rst(rst),
    .reset_flag(M_flagbutton_submit_reset_flag),
    .button(M_flagbutton_submit_button),
    .flagout(M_flagbutton_submit_flagout)
  );
  wire [1-1:0] M_flagbutton_up_flagout;
  reg [1-1:0] M_flagbutton_up_reset_flag;
  reg [1-1:0] M_flagbutton_up_button;
  counter_2 flagbutton_up (
    .clk(clk),
    .rst(rst),
    .reset_flag(M_flagbutton_up_reset_flag),
    .button(M_flagbutton_up_button),
    .flagout(M_flagbutton_up_flagout)
  );
  wire [1-1:0] M_flagbutton_down_flagout;
  reg [1-1:0] M_flagbutton_down_reset_flag;
  reg [1-1:0] M_flagbutton_down_button;
  counter_2 flagbutton_down (
    .clk(clk),
    .rst(rst),
    .reset_flag(M_flagbutton_down_reset_flag),
    .button(M_flagbutton_down_button),
    .flagout(M_flagbutton_down_flagout)
  );
  wire [1-1:0] M_flagbutton_reset_flagout;
  reg [1-1:0] M_flagbutton_reset_reset_flag;
  reg [1-1:0] M_flagbutton_reset_button;
  counter_2 flagbutton_reset (
    .clk(clk),
    .rst(rst),
    .reset_flag(M_flagbutton_reset_reset_flag),
    .button(M_flagbutton_reset_button),
    .flagout(M_flagbutton_reset_flagout)
  );
  wire [10-1:0] M_bullscows_bullscows;
  reg [16-1:0] M_bullscows_cIn;
  reg [16-1:0] M_bullscows_cTest;
  bullscows_9 bullscows (
    .clk(clk),
    .rst(rst),
    .cIn(M_bullscows_cIn),
    .cTest(M_bullscows_cTest),
    .bullscows(M_bullscows_bullscows)
  );
  reg [3:0] M_row_d, M_row_q = 1'h0;
  reg [2:0] M_col_d, M_col_q = 1'h0;
  reg [149:0] M_r0_d, M_r0_q = 1'h0;
  reg [99:0] M_bc_d, M_bc_q = 1'h0;
  reg [14:0] M_a_d, M_a_q = 1'h0;
  reg [8:0] M_counter_d, M_counter_q = 1'h0;
  reg [7:0] M_col_counter_d, M_col_counter_q = 1'h0;
  reg [24:0] M_blink_counter_d, M_blink_counter_q = 1'h0;
  reg [3:0] M_ground_i_d, M_ground_i_q = 1'h0;
  reg [3:0] M_col_i_d, M_col_i_q = 1'h0;
  reg [0:0] M_blink_i_d, M_blink_i_q = 1'h0;
  reg [0:0] M_start_flag_d, M_start_flag_q = 1'h0;
  reg [2:0] M_start_state_d, M_start_state_q = 1'h0;
  reg [14:0] M_bull_num_d, M_bull_num_q = 1'h0;
  reg [3:0] M_diff_d, M_diff_q = 4'h9;
  wire [32-1:0] M_pn_gen_num;
  reg [1-1:0] M_pn_gen_next;
  reg [32-1:0] M_pn_gen_seed;
  pn_gen_10 pn_gen (
    .clk(clk),
    .rst(rst),
    .next(M_pn_gen_next),
    .seed(M_pn_gen_seed),
    .num(M_pn_gen_num)
  );
  
  reg [9:0] temp_bullscows;
  
  reg [14:0] pn_mask;
  
  reg [14:0] f_mask;
  
  reg is_win;
  
  reg [2:0] not_empty;
  
  integer loop_break;
  
  integer i;
  
  integer j;
  
  always @* begin
    M_col_d = M_col_q;
    M_diff_d = M_diff_q;
    M_bull_num_d = M_bull_num_q;
    M_a_d = M_a_q;
    M_counter_d = M_counter_q;
    M_start_flag_d = M_start_flag_q;
    M_start_state_d = M_start_state_q;
    M_row_d = M_row_q;
    M_blink_counter_d = M_blink_counter_q;
    M_col_i_d = M_col_i_q;
    M_r0_d = M_r0_q;
    M_ground_i_d = M_ground_i_q;
    M_blink_i_d = M_blink_i_q;
    M_bc_d = M_bc_q;
    M_col_counter_d = M_col_counter_q;
    
    for (i = 1'h0; i < 3'h5; i = i + 1) begin
      M_a_d[(i)*3+2-:3] = 3'h0;
    end
    is_win = 1'h1;
    not_empty = 1'h0;
    M_flagbutton_up_button = ~up_button;
    M_flagbutton_up_reset_flag = 1'h0;
    M_flagbutton_down_button = ~down_button;
    M_flagbutton_down_reset_flag = 1'h0;
    M_flagbutton_reset_button = ~reset_button;
    M_flagbutton_reset_reset_flag = 1'h0;
    M_flagbutton_shift_left_button = ~left_button;
    M_flagbutton_shift_left_reset_flag = 1'h0;
    M_flagbutton_shift_right_button = ~right_button;
    M_flagbutton_shift_right_reset_flag = 1'h0;
    M_flagbutton_submit_button = ~submit_button;
    M_flagbutton_submit_reset_flag = 1'h0;
    M_flagbutton_color_button = ~color_button;
    M_flagbutton_color_reset_flag = 7'h00;
    if (M_flagbutton_reset_flagout) begin
      M_row_d = 1'h0;
      M_col_d = 1'h0;
      for (i = 1'h0; i < 4'ha; i = i + 1) begin
        for (j = 1'h0; j < 4'h5; j = j + 1) begin
          M_r0_d[(i)*15+(j)*3+2-:3] = 3'h0;
        end
      end
      for (i = 1'h0; i < 4'ha; i = i + 1) begin
        for (j = 1'h0; j < 4'h5; j = j + 1) begin
          M_bc_d[(i)*10+(j)*2+1-:2] = 2'h0;
        end
      end
      M_start_flag_d = 1'h0;
      M_start_state_d = 1'h0;
      M_diff_d = 4'h9;
      M_flagbutton_reset_reset_flag = 1'h1;
    end
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_bullscows_cIn[0+2-:3] = M_r0_q[(M_row_q)*15+0+2-:3];
    M_bullscows_cIn[3+2-:3] = M_r0_q[(M_row_q)*15+3+2-:3];
    M_bullscows_cIn[6+2-:3] = M_r0_q[(M_row_q)*15+6+2-:3];
    M_bullscows_cIn[9+2-:3] = M_r0_q[(M_row_q)*15+9+2-:3];
    M_bullscows_cIn[12+2-:3] = M_r0_q[(M_row_q)*15+12+2-:3];
    M_pn_gen_seed = 11'h539;
    M_pn_gen_next = 1'h1;
    if (M_start_flag_q && !M_start_state_q) begin
      M_bull_num_d = M_pn_gen_num[0+14-:15];
      pn_mask = M_bull_num_q;
      for (i = 1'h0; i < 3'h5; i = i + 1) begin
        if (pn_mask[0+2-:3] == 3'h0) begin
          M_bull_num_d = M_bull_num_q + (1'h1 << i * 2'h3);
        end
        if (i != 3'h4) begin
          pn_mask = pn_mask >> 2'h3;
        end
      end
      M_start_state_d = 1'h1;
    end
    M_bullscows_cTest[0+14-:15] = M_bull_num_q;
    temp_bullscows[0+1-:2] = M_bullscows_bullscows[0+1-:2];
    temp_bullscows[2+1-:2] = M_bullscows_bullscows[2+1-:2];
    temp_bullscows[4+1-:2] = M_bullscows_bullscows[4+1-:2];
    temp_bullscows[6+1-:2] = M_bullscows_bullscows[6+1-:2];
    temp_bullscows[8+1-:2] = M_bullscows_bullscows[8+1-:2];
    ground = 10'h3ff;
    if (!M_start_state_q) begin
      if (M_flagbutton_up_flagout && M_diff_q < 4'h9) begin
        M_diff_d = M_diff_q + 1'h1;
        M_flagbutton_up_reset_flag = 1'h1;
      end
      if (M_flagbutton_down_flagout && M_diff_q > 1'h1) begin
        M_diff_d = M_diff_q - 1'h1;
        M_flagbutton_down_reset_flag = 1'h1;
      end
      color_led[0+2-:3] = 3'h1;
      for (i = 1'h1; i < 3'h5; i = i + 1) begin
        color_led[(i)*3+2-:3] = 3'h0;
      end
      ground = 10'h3ff << M_diff_q;
      if (M_flagbutton_submit_flagout) begin
        M_start_flag_d = 1'h1;
        M_flagbutton_submit_reset_flag = 1'h1;
      end
    end else begin
      if (M_start_state_q == 1'h1) begin
        for (i = 1'h0; i < 3'h7; i = i + 1) begin
          if (M_flagbutton_color_flagout[(i)*1+0-:1] == 1'h1) begin
            M_a_d[(M_col_q)*3+0+2-:3] = i + 1'h1;
            M_flagbutton_color_reset_flag[(i)*1+0-:1] = 1'h1;
          end
        end
        if (M_a_q[(M_col_q)*3+2-:3] > 1'h0) begin
          M_r0_d[(M_row_q)*15+(M_col_q)*3+2-:3] = M_a_q[(M_col_q)*3+2-:3];
        end
        if (M_flagbutton_shift_right_flagout && M_col_q > 1'h0) begin
          M_col_d = M_col_q - 1'h1;
          M_flagbutton_shift_right_reset_flag = 1'h1;
        end else begin
          if (M_flagbutton_shift_left_flagout && M_col_q < 3'h4) begin
            M_col_d = M_col_q + 1'h1;
            M_flagbutton_shift_left_reset_flag = 1'h1;
          end else begin
            if (M_flagbutton_submit_flagout && M_row_q < 4'ha) begin
              f_mask = M_r0_q[(M_row_q)*15+14-:15];
              loop_break = 1'h0;
              for (i = 1'h0; i < 3'h5; i = i + 1) begin
                if (f_mask[(i)*3+2-:3] == 3'h0) begin
                  loop_break = 1'h1;
                end
              end
              if (!loop_break) begin
                M_bc_d[(M_row_q)*10+0+1-:2] = temp_bullscows[0+1-:2];
                M_bc_d[(M_row_q)*10+2+1-:2] = temp_bullscows[2+1-:2];
                M_bc_d[(M_row_q)*10+4+1-:2] = temp_bullscows[4+1-:2];
                M_bc_d[(M_row_q)*10+6+1-:2] = temp_bullscows[6+1-:2];
                M_bc_d[(M_row_q)*10+8+1-:2] = temp_bullscows[8+1-:2];
                if (M_row_q >= M_diff_q) begin
                  M_start_state_d = 2'h2;
                end
                for (i = 1'h0; i < 3'h5; i = i + 1) begin
                  if (M_bc_q[(M_row_q)*10+(i)*2+1-:2] != 2'h2) begin
                    is_win = 1'h0;
                  end
                end
                if (is_win) begin
                  M_start_state_d = 2'h2;
                end
                M_row_d = M_row_q + 1'h1;
                M_col_d = 1'h0;
              end
              M_flagbutton_submit_reset_flag = 1'h1;
            end
          end
        end
      end
    end
    if (M_start_state_q >= 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      if (M_counter_q[8+0-:1] == 1'h1) begin
        M_ground_i_d = M_ground_i_q + 1'h1;
        if (M_ground_i_q >= 4'ha) begin
          M_ground_i_d = 1'h0;
        end
        M_counter_d = 1'h0;
      end
      M_col_counter_d = M_col_counter_q + 1'h1;
      if (M_col_i_q < 3'h5 && M_col_counter_q[5+0-:1] == 1'h1) begin
        M_col_i_d = M_col_i_q + 1'h1;
        if (M_col_i_q >= 4'ha) begin
          M_col_i_d = 1'h0;
        end
        M_col_counter_d = 1'h0;
      end else begin
        if (M_col_i_q >= 3'h5 && M_col_counter_q[7+0-:1] == 1'h1) begin
          M_col_i_d = M_col_i_q + 1'h1;
          if (M_col_i_q >= 4'ha) begin
            M_col_i_d = 1'h0;
          end
          M_col_counter_d = 1'h0;
        end
      end
      M_blink_counter_d = M_blink_counter_q + 1'h1;
      if (M_blink_counter_q[24+0-:1] == 1'h1) begin
        M_blink_i_d = M_blink_i_q + 1'h1;
        M_blink_counter_d = 1'h0;
      end
      ground[(M_ground_i_q)*1+0-:1] = 1'h0;
      for (i = 1'h0; i < 4'ha; i = i + 1) begin
        if (i < 3'h5) begin
          if (M_col_i_q == i) begin
            color_led[(i)*3+2-:3] = M_r0_q[(M_ground_i_q)*15+(i)*3+2-:3];
            if (!M_blink_i_q && M_col_q == i && M_row_q == M_ground_i_q) begin
              color_led[(i)*3+2-:3] = 1'h0;
            end
          end else begin
            color_led[(i)*3+2-:3] = 3'h0;
          end
        end else begin
          if (M_col_i_q == i) begin
            bc_led[(i - 3'h5)*2+1-:2] = M_bc_q[(M_ground_i_q)*10+(i - 3'h5)*2+1-:2];
          end else begin
            bc_led[(i - 3'h5)*2+1-:2] = 2'h0;
          end
        end
      end
      M_r0_d[135+0+2-:3] = M_bull_num_q[0+2-:3];
      M_r0_d[135+3+2-:3] = M_bull_num_q[3+2-:3];
      M_r0_d[135+6+2-:3] = M_bull_num_q[6+2-:3];
      M_r0_d[135+9+2-:3] = M_bull_num_q[9+2-:3];
      M_r0_d[135+12+2-:3] = M_bull_num_q[12+2-:3];
    end
    if (M_start_state_q == 2'h2) begin
      M_r0_d[135+0+2-:3] = M_bull_num_q[0+2-:3];
      M_r0_d[135+3+2-:3] = M_bull_num_q[3+2-:3];
      M_r0_d[135+6+2-:3] = M_bull_num_q[6+2-:3];
      M_r0_d[135+9+2-:3] = M_bull_num_q[9+2-:3];
      M_r0_d[135+12+2-:3] = M_bull_num_q[12+2-:3];
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_row_q <= 1'h0;
      M_col_q <= 1'h0;
      M_r0_q <= 1'h0;
      M_bc_q <= 1'h0;
      M_a_q <= 1'h0;
      M_counter_q <= 1'h0;
      M_col_counter_q <= 1'h0;
      M_blink_counter_q <= 1'h0;
      M_ground_i_q <= 1'h0;
      M_col_i_q <= 1'h0;
      M_blink_i_q <= 1'h0;
      M_start_flag_q <= 1'h0;
      M_start_state_q <= 1'h0;
      M_bull_num_q <= 1'h0;
      M_diff_q <= 4'h9;
    end else begin
      M_row_q <= M_row_d;
      M_col_q <= M_col_d;
      M_r0_q <= M_r0_d;
      M_bc_q <= M_bc_d;
      M_a_q <= M_a_d;
      M_counter_q <= M_counter_d;
      M_col_counter_q <= M_col_counter_d;
      M_blink_counter_q <= M_blink_counter_d;
      M_ground_i_q <= M_ground_i_d;
      M_col_i_q <= M_col_i_d;
      M_blink_i_q <= M_blink_i_d;
      M_start_flag_q <= M_start_flag_d;
      M_start_state_q <= M_start_state_d;
      M_bull_num_q <= M_bull_num_d;
      M_diff_q <= M_diff_d;
    end
  end
  
endmodule
