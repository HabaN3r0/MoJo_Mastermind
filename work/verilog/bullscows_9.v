/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module bullscows_9 (
    input clk,
    input rst,
    input [15:0] cIn,
    input [15:0] cTest,
    output reg [9:0] bullscows
  );
  
  
  
  reg [15:0] M_a_d, M_a_q = 1'h0;
  reg [15:0] M_b_d, M_b_q = 1'h0;
  reg [15:0] M_mask_d, M_mask_q = 1'h0;
  reg [14:0] M_cow_a_d, M_cow_a_q = 1'h0;
  reg [14:0] M_cow_b_d, M_cow_b_q = 1'h0;
  reg [14:0] M_mask_a_d, M_mask_a_q = 1'h0;
  reg [14:0] M_mask_b_d, M_mask_b_q = 1'h0;
  
  reg [2:0] bulls;
  
  reg [2:0] cows;
  
  reg [15:0] imm_mask;
  
  reg [15:0] bull_out;
  
  reg [4:0] cows_add;
  
  reg [9:0] temp_bullscows;
  
  reg [9:0] bull_adder;
  
  reg [9:0] cow_adder;
  
  integer i;
  
  integer j;
  
  reg [4:0] break;
  
  always @* begin
    M_mask_b_d = M_mask_b_q;
    M_cow_b_d = M_cow_b_q;
    M_mask_a_d = M_mask_a_q;
    M_cow_a_d = M_cow_a_q;
    M_b_d = M_b_q;
    M_a_d = M_a_q;
    M_mask_d = M_mask_q;
    
    M_a_d = cIn;
    M_b_d = cTest;
    bulls = 3'h0;
    cows = 3'h0;
    imm_mask = 16'h0007;
    temp_bullscows = 10'h000;
    bull_adder = 10'h002;
    cow_adder = 10'h001;
    cows_add = 5'h00;
    bull_out = M_a_q ~^ M_b_q;
    M_mask_d = bull_out;
    for (i = 1'h0; i < 3'h5; i = i + 1) begin
      if (bull_out[0+2-:3] == 3'h7) begin
        bulls = bulls + 1'h1;
      end
      bull_out = bull_out >> 2'h3;
    end
    M_cow_a_d[0+2-:3] = M_a_q[0+2-:3];
    M_cow_a_d[3+2-:3] = M_a_q[3+2-:3];
    M_cow_a_d[6+2-:3] = M_a_q[6+2-:3];
    M_cow_a_d[9+2-:3] = M_a_q[9+2-:3];
    M_cow_a_d[12+2-:3] = M_a_q[12+2-:3];
    M_mask_a_d[0+2-:3] = M_mask_q[0+2-:3];
    M_mask_a_d[3+2-:3] = M_mask_q[3+2-:3];
    M_mask_a_d[6+2-:3] = M_mask_q[6+2-:3];
    M_mask_a_d[9+2-:3] = M_mask_q[9+2-:3];
    M_mask_a_d[12+2-:3] = M_mask_q[12+2-:3];
    M_cow_b_d[0+2-:3] = M_b_q[0+2-:3];
    M_cow_b_d[3+2-:3] = M_b_q[3+2-:3];
    M_cow_b_d[6+2-:3] = M_b_q[6+2-:3];
    M_cow_b_d[9+2-:3] = M_b_q[9+2-:3];
    M_cow_b_d[12+2-:3] = M_b_q[12+2-:3];
    M_mask_b_d[0+2-:3] = M_mask_q[0+2-:3];
    M_mask_b_d[3+2-:3] = M_mask_q[3+2-:3];
    M_mask_b_d[6+2-:3] = M_mask_q[6+2-:3];
    M_mask_b_d[9+2-:3] = M_mask_q[9+2-:3];
    M_mask_b_d[12+2-:3] = M_mask_q[12+2-:3];
    break = 1'h0;
    for (i = 1'h0; i < 3'h5; i = i + 1) begin
      if (M_mask_a_q[(i)*3+2-:3] != 3'h7) begin
        for (j = 1'h0; j < 3'h5; j = j + 1) begin
          if (M_mask_b_q[(j)*3+2-:3] != 3'h7) begin
            if (M_cow_a_q[(i)*3+2-:3] == M_cow_b_q[(j)*3+2-:3]) begin
              if (!break[(i)*1+0-:1]) begin
                M_mask_b_d[(j)*3+2-:3] = 3'h7;
                break[(i)*1+0-:1] = 1'h1;
              end
              cows_add[(i)*1+0-:1] = cows_add[(i)*1+0-:1] | 1'h1;
            end
          end
        end
      end
      cows = cows + cows_add[(i)*1+0-:1];
    end
    for (i = 1'h0; i < cows; i = i + 1) begin
      temp_bullscows = temp_bullscows + cow_adder;
      cow_adder = cow_adder << 2'h2;
    end
    cow_adder = cow_adder << 1'h1;
    for (i = 1'h0; i < bulls; i = i + 1) begin
      temp_bullscows = temp_bullscows + cow_adder;
      cow_adder = cow_adder << 2'h2;
    end
    bullscows = temp_bullscows;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_a_q <= 1'h0;
      M_b_q <= 1'h0;
      M_mask_q <= 1'h0;
      M_cow_a_q <= 1'h0;
      M_cow_b_q <= 1'h0;
      M_mask_a_q <= 1'h0;
      M_mask_b_q <= 1'h0;
    end else begin
      M_a_q <= M_a_d;
      M_b_q <= M_b_d;
      M_mask_q <= M_mask_d;
      M_cow_a_q <= M_cow_a_d;
      M_cow_b_q <= M_cow_b_d;
      M_mask_a_q <= M_mask_a_d;
      M_mask_b_q <= M_mask_b_d;
    end
  end
  
endmodule
